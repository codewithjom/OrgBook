#+title: Learn HTML
#+author: Jom Dollesin

*Disclaimer*: This is not my original copy of the book I wrote, most of these are comming from W3schools. The reason for this is for me whenever I am not online I have a copy which I can scan when I need it.

* Basics
** HTML Documents

All HTML documents must start with a document type declaration: =<!DOCTYPE html>=.

The HTML document itself begins with =<html>= and ends with =</html>=.

The visible part of the HTML document is between =<body>= and =</body>=.

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <body>

      <h1>Hello World</h1>
      <p>Etiam vel tortor sodales tellus ultricies commodo.</p>

    </body>
  </html>

#+end_src

** The <!DOCTYPE> Declaration

The =<!DOCTYPE>= declaration represents the document type, and helps browsers to display web pages correctly.

It must only appear once, at the top of the page (before any HTML tags).

The =<!DOCTYPE>= declaration is not case sensitive.

The =<DOCTYPE>= declaration for HTML5 is:

#+begin_src html

  <!DOCTYPE html>

#+end_src

** HTML Headings

HTML headings are defined with the =<h1>= to =<h6>= tags.

=<h1>= defines the most important heading. =<h6>= defines the least important heading.

*Example*:
#+begin_src html

  <h1>Hello World</h1>
  <h2>Hello World</h2>
  <h3>Hello World</h3>

#+end_src

** HTML Paragraphs

HTML paragraphs are defined with the =<p>= tag.

*Example*:
#+begin_src html

  <p>Etiam laoreet quam sed arcu.</p>
  <p>Nullam tristique diam non turpis.</p>

#+end_src

** HTML Links

HTML links are defined with the =<a>= tag.

*Example*:
#+begin_src html

  <a href="https://github.com/codewithjom">My GitHub</a>

#+end_src

The link's destination is specified in the =href= attribute.

Attributes are used to provide additional information about HTML elements.

** HTML Images

HTML images are defined with the =<img>= tag.

The source file (=src=), alternative text (=alt=), =width= and =height= are provided as attributes.

*Example*:
#+begin_src html

  <img src="profile.jpg" alt="A profile picture" width="104" height="142">

#+end_src

* Elements
** HTML Elements

An HTML element is defined by a start tag, some content, and a end tag.

| *Start tag* | *Element content* | *End tag* |
|-----------+-----------------+---------|
| <h1>      | Hello World     | </h1>   |
| <p>       | Lorem Ipsum     | </p>    |
| <br>      | /none/            | /none/    |

*Note*: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag!

** Nested HTML Elements

HTML elements can be nested (this means that elements can contain other elements).

All HTML documents consist of nested HTML elements.

The following example contains four HTML element (=<html>=, =<body>=, =<h1>= and =<p>=):

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <body>

      <h1>Hello World</h1>
      <p>Etiam vel tortor sodales tellus ultricies commodo.</p>

    </body>
  </html>

#+end_src

* Attributes
** HTML Attributes

- All HTML elements can have *attributes*
- Attributes provide *additional information* about elements
- Attributes are always specified in *the start tag*
- Attributes usually come in name/value pairs like: *name="value"*

** The href Attribute

The =<a>= tag defines a hyperlink. The =href= attributes specifies the URL of the page the link goes to:

*Example*:
#+begin_src html

  <a href="https://github.com/codewithjom">My GitHub</a>

#+end_src

** The src Attribute

The =<img>= tag is used to embed an image in an HTML page. The =src= attribute specifies the path to the image to be displayed:

*Example*:
#+begin_src html

  <img src="profile.jpg">

#+end_src

There are two ways to specify the URL in the =src= attribute:

1. =Absolute URL= - Links to an external image that is hosted on another website. Example: *src="https://fakewebsite.com/profile.jpg"*

*Note*: External images might be under copyright. If you do not get permission to use it, you me be in violation of copyright laws. In addition, you cannot control external images; it can suddenly be removed or changed.

2. =Relative URL= - Links to an image that is hosted within the website. Here, the URL does not include the domain name. If the URL begins without a slash, it will be relative to the current page. Example: src="profile.jpg". If the URL begins with a slash, it will be relative to the domain. Example: src="/images/profile.jpg".

*Tip*: It is almost always best to use relative URLs. They will not break if you change domain.

** The width and height Attributes

The =<img>= tag should also contain the =width= and =height= attributes, which specifies the width and height of the image (in pixels).

*Example*:
#+begin_src html

  <img src="profile.jpg" width="500" height="600">

#+end_src

** The alt Attribute

The required =alt= attribute for the =<img>= tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to slow connection, or an error in the =src= attribute, or if the user uses a screen reader.

*Example*:
#+begin_src html

  <img src="profile.jpg" alt="A profile picture">

#+end_src

This what happends if we try to diplay an image that does not exist!

*Example*:
#+begin_src html

  <img src="fakeprofile.jpg" alt="A profile picture.">

#+end_src

** The style Attribute

The =style= attribute is used to add styles to an element, such as color, font, size, and more.

*Example*:
#+begin_src html

  <p style="color:red;">Integer placerat tristique nisl.</p>

#+end_src

** The lang Attribute

You should always include the =lang= attribute inside the =<html>= tag, to declare the language of the Web page. This is meant to assist search engines and browsers.

The following example specifies English as the language:

#+begin_src html

  <!DOCTYPE html>
  <html lang="en">
    <body>

      ...

    </body>
  </html>

#+end_src

Country codes can also be added to the language code in the =lang= attribute. So, the first two characters define the language of the HTML page, and the last two characters define the country.

The following example specifies English as the language and United States as the country:

#+begin_src html

  <!DOCTYPE html>
  <html lang="en-US">
    <body>

      ...

    </body>
  </html>

#+end_src

** The title Attribute

The =title= attribute defines some extra information about an element.

The value of the title attribute will be displayed as a tooltip when you mouse over the element.

*Example*:
#+begin_src html

  <p title="Hello World">Nam vestibulum accumsan nisl.</p>

#+end_src

** Always Use Lowecase Attributes

The HTML standard does not require lowercase attribute names.

The title attribute (and all other attributes) can be written with uppercase or lowercase like *title* or *TITLE*.

** Always Quote Attribute Values

The HTML standard does not require quotes around attribute values.

Good:
#+begin_src html

  <a href="https://github.com/codewithjom">My GitHub</a>

#+end_src

Bad:
#+begin_src html

  <a href=https://github.com/codewithjom>My GitHub</a>

#+end_src

Sometimes you have to use quotes. This example will not display the title attribute correctly, because it contains a space.

#+begin_src html

 <p title=Hello World>

#+end_src

** Single or Double Quotes?

Double quotes around attribute values are the most common in HTML, but single quotes can also be used.

In some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes.

#+begin_src html

  <p title='Jom "Totoy" Dollesin'>

#+end_src

Or vice versa:

#+begin_src html

  <p title="Jom 'Totoy' Dollesin">

#+end_src

* Headings
** HTML Headings

HTML headings are defined with the =<h1>= to =<h6>= tags.

=<h1>= defines the most important heading. =<h6>= defines the least important heading.

*Example*:
#+begin_src html

  <h1>Hello World</h1>
  <h2>Hello World</h2>
  <h3>Hello World</h3>
  <h4>Hello World</h4>
  <h5>Hello World</h5>
  <h6>Hello World</h6>

#+end_src

*Note*: Browsers automatically add some white space (a margin) before and after a heading.

** Headings Are Important

Search engines use the headings to index the structure and content of your web pages.

Users often skim a page by its headings. It is important to use headings to show the document structure.

=<h1>= headings should be used for main headings, followed by =<h2>= headings, then the less important =<h3>=, and so on.

*Note*: Use HTML headings for headings only, Don't use headings to make text *BIG* or *bold*.

** Bigger Headings

Each HTML heading has a default size. However, you can specify the size for any heading with the =style= attribute, using the CSS =font-size= property.

*Example*:
#+begin_src html

  <h1 style="font-size:60px;">Hello World</h1>

#+end_src

* Paragraphs
** HTML Paragraphs

The HTML =<p>= element defines a paragraph.

A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.

*Example*:
#+begin_src html

  <p>Etiam vel neque nec dui dignissim bibendum.</p>
  <p>Etiam vel neque nec dui dignissim bibendum.</p>

#+end_src

** HTML Display

You cannot be sure how HTML will be displayed.

Large or small screens, and resized windows will create different results.

With HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.

The browser will automatically remove any extra spaces and lines when the page is displayed.

*Example*:
#+begin_src html

  <p>
    Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.
  </p>

  <p>
    Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam                  vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.                        Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui                in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.
  </p>

#+end_src

** HTML Horizontal Rules

The =<hr>= tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.

The =<hr>= element is used to separate content (or define a change) in an HTML page.

*Example*:
#+begin_src html

  <h1>Hello World</h1>
  <p>Phasellus at dui in ligula mollis ultricies.</p>
  <hr>
  <h2>Hello World</h2>
  <p>Donec hendrerit tempor tellus.</p>

#+end_src

The =<hr>= tag is an empty tag, which means that it has no end tag.

** HTML Line Breaks

The HTML =<br>= element defines a line break.

Use the =<br>= if you want a line break (a new line) without starting a new paragraph:

*Example*:
#+begin_src html

  <p>Nullam eu <br>ante vel est <br>convallis dignissim.</p>

#+end_src

The =<br>= tag is an empty tag, which means that it has no end tag.

** The Poem Problem

This poem will diplay on a single line:

*Example*:
#+begin_src html

  <p>
    My Bonnie lies over the ocean.

    My Bonnie lies over the sea.

    My Bonnie lies over the ocean.

    Oh, bring back my Bonnie to me.
  </p>

#+end_src

** Solution - The HTML <pre> Element

The HTML =<pre>= element defines preformatted text.

The text inside a =<pre>= element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks.

*Example*:
#+begin_src html

  <pre>
    My Bonnie lies over the ocean.

    My Bonnie lies over the sea.

    My Bonnie lies over the ocean.

    Oh, bring back my Bonnie to me.
  </pre>

#+end_src

* Styles
** The HTML Style Attribute

Setting the style of a HTML element, can be done with the =style= attribute. The HTML =style= attribute has the following syntax:

#+begin_src html

  <tagname style="property:value;">

#+end_src

The *property* is a CSS property. The *value* is a CSS value.

** Background Color

The CSS =background-color= property defines the background color for an HTML element.

*Example*:
#+begin_src html

  <body>
    <h1>Hello World</h1>
    <p>Nulla posuere.</p>
  </body>

#+end_src

*Example*:
#+begin_src html

  <body>
    <h1 style="background-color:powderblue;">Hello World</h1>
    <p style="background-color:tomato;">Nulla posuere.</p>
  </body>

#+end_src

** Text Color

The CSS =color= property defines the text color for an HTML element.

*Example*:
#+begin_src html

  <h1 style="color:blue;">Hello World</h1>
  <p style="color:red;">Aliquam erat volutpat.</p>

#+end_src

** Fonts

The CSS =font-family= property defines the font to be used for an HTML element.

*Example*:
#+begin_src html

  <h1 style="font-family:verdana;">Hello World</h1>
  <p style="font-family:courier;">Cras placerat accumsan nulla.</p>

#+end_src

** Text Size

The CSS =font-size= property defines the text size for an HTML element:

*Example*:
#+begin_src html

  <h1 style="font-size:300%;">Hello World</h1>
  <p style="font-size:160%;">Nam vestibulum accumsan nisl.</p>

#+end_src

** Text Alignment

The CSS =text-alignment= property defines the horizontal text alignment for an HTML element:

*Example*:
#+begin_src html

  <h1 style="text-align:center;">Hello World</h1>
  <p style="text-align:center;">Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.</p>

#+end_src

* Formatting
** HTML Formatting Elements

Formatting elements were designed to display special types of text:

- =<b>= - Bold Text
- =<strong>= - Important Text
- =<i>= - Italic Text
- =<em>= - Emphasized Text
- =<mark>= - Marked Text
- =<small>= - Smaller Text
- =<del>= - Deleted Text
- =<ins>= - Inserted Text
- =<sub>= - Subscript Text
- =<sup>= - Superscript Text

** HTML <b> and <strong> Elements

The HTML =<b>= element defines bold text, without any extra importance.

*Example*:
#+begin_src html

  <b>This is bold</b>

#+end_src

The HTML =<strong>= element defines text with strong importance. The content inside is typically displayed in bold.

*Example*:
#+begin_src html

  <strong>This text is important!</strong>

#+end_src

** HTML <i> and <em> Elements

The HTML =<i>= element defines a part of text in an alternate voice or mood. The content inside is typically displayed in italic.

*Tip*: The =<i>= tag is often used to indicate a technical term, a phrase from another language, a thought, a ship name, etc.

*Example*:
#+begin_src html

  <i>This text is italic</i>

#+end_src

The HTML =<em>= element defines emphasized text. The content inside is typically displayed in italic.

*Tip*: A screen reader will pronounce the words in =<em>= with an emphasis, using verbal stress.

*Example*:
#+begin_src html

  <em>This text is emphasized</em>

#+end_src

** HTML <smalL> Element

The HTML =<smalll>= element defines smaller text:

*Example*:
#+begin_src html

  <small>This is some smaller text.</small>

#+end_src

** HTML <mark> Element

The HTML =<mark>= element defines text that should be marked or highlighted:

*Example*:
#+begin_src html

  <p>Pellentesque condimentum, magna ut <mark>suscipit</mark> hendrerit, ipsum augue ornare nulla, non luctus diam neque sit amet urna.</p>

#+end_src

** HTML <del> Element

The HTML =<del>= element defines text that has been deleted from a document. Browsers will usually strike a line through deleted text:

*Example*:
#+begin_src html

  <p>Phasellus neque orci, porta a, <del>aliquet quis</del>, semper a, massa.</p>

#+end_src

** HTML <ins> Element

The HTML =<ins>= element defines a text that has been inserted into a document. Browsers will usually underline inserted text:

*Example*:
#+begin_src html

  <p>Nunc aliquet, augue nec <del>adipiscing</del> <ins>interdum</ins>, lacus tellus malesuada massa, quis varius mi purus non odio.</p>

#+end_src

** HTML <sub> Element

The HTML =<sub>= element defines subscript text. Subscript text appears half a character below the normal line, and is sometimes rendered in a smaller font. Subscript text can be used for chemical formulas.

*Example*:
#+begin_src html

  <p>This is <sub>subscripted</sub> text.</p>

#+end_src

** HTML <sup> Element

The HTML =<sup>= element defines superscript text. Superscript text appears half a character above the normal line, and is sometimes rendered in a smaller font. Superscript text can be used for footnotes.

*Example*:
#+begin_src html

  <p>Aliquam <sup>posuere</sup>.Donec at pede.</p>

#+end_src

* Quotations
** HTML <blockquote> for Quotations

The HTML =<blockquote>= element defines a section that is quoted from another source.

Browsers usually indent =<blockquote>= element.

*Example*:
#+begin_src html

  <p>Here is a quote from WWF's website:</p>

  <blockquote cite="http://www.worldwildlife.org/who/index.html">
  For 50 years, WWF has been protecting the future of nature.
  The world's leading conservation organization,
  WWF works in 100 countries and is supported by
  1.2 million members in the United States and
  close to 5 million globally.
  </blockquote>

#+end_src

** HTML <q> for Short Quotations

The HTML =<q>= tag defines a short quotations.

Browsers normally insert quotation marks around the quotation.

*Example*:
#+begin_src html

  <p>Integer placerat <q>tristique</q> nisl.</p>

#+end_src

** HTML <abbr> for Abbreviations

The HTML =<abbr>= tag defines an abbreviations or an acronym, like "HTML", "CSS", "Mr.", "Dr.", "ASAP", "ATM".

Marking abbreviations can give useful information to browsers, translation systems and search-engines.

*Tip*: Use the global title attribute to show the discription for the abbreviations/acronym when you mouse over the element.

*Example*:
#+begin_src html

  <p>The <abbr title="World Health Organization">WHO</abbr> was founded in 1948.</p>

#+end_src

** HTML <address> for Contact Information

The HTML =<address>= tag defines the contact information for the author/owner of a document or an article.

The contact information can be an email address, URL, physical address, phone number, social media handle, etc.

The text in the =<address>= element usually renders in /italic/, and browsers will always add a line break before and after the =<address>= element.

*Example*:
#+begin_src html

  <address>
    Written by Jom Dollesin.<br>
    My GitHub:<br>
    github.com/codewithjom<br>
    ...
  </address>

#+end_src

** HTML <cite> for Work Title

The HTML =<cite>= tag defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).

*Note*: A person's name is not the title of a work.

The text in the =<cite>= element usually renders in /italic/.

*Example*:
#+begin_src html

  <p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>

#+end_src

** HTML <bdo> for Bi-Directional Override

BDO stands for Bi-Directional Override.

The HTML =<bdo>= tag is used to override the current text direction.

*Example*:
#+begin_src html

  <bdo dir="rtl">This text will be written from right to left.</bdo>

#+end_src

* Comments
** HTML Comment Tag

You can add comments to your HTML source by using the following syntax:

#+begin_src html

  <!-- Write your comment here -->

#+end_src

Notice that there is an exclamation point (!) in the start tag, but not in the end tag.

*Note*: Comments are not displayed by the browsers, but they can help document your HTML source code.

* Colors
** Color Names

In HTML, a color can be specified by using a color name:

+ Tomato
+ DodgerBlue
+ Gray
+ Violet
+ Orange
+ MediumSeaGreen
+ SlateBlue
+ LightGray

** Background Color

You can set the background color for HTML elements.

*Example*:
#+begin_src html

  <h1 style="background-color:DodgerBlue;">Hello World</h1>
  <p style="background-color:Tomato;">Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.</p>

#+end_src

** Text Color

You can set the color of text.

*Example*:
#+begin_src html

  <h1 style="color:Tomato;">Hello World</h1>
  <p style="color:DodgerBlue;">Lorem Ipsum...</p>

#+end_src

** Border Color

You can set the color of borders.

*Example*:
#+begin_src html

  <h1 style="border:2px solid Tomato;">Hello World</h1>
  <h1 style="border:2px solid DodgerBlue;">Hello World</h1>
  <h1 style="border:2px solid Violet;">Hello World</h1>

#+end_src

** Color Values

In HTML, colors can also be specified using RGB value, HEX values, HSL values, RGBA values, HSLA values.

The following three <div> elements have their background color set with RGB, HEX, and HSL values.

*Example*:
#+begin_src html

  <h1 style="background-color:rgb(255, 99, 71);">...</h1>
  <h1 style="background-color:#ff6347;">...</h1>
  <h1 style="background-color:hsl(9, 100%, 64%);">...</h1>

#+end_src

The following two <div> elements have their background color set with RGBA and HSLA values, which adds an Alpha channel to the color (Here we have 50% transparency):

*Example*:
#+begin_src html

  <h1 style="background-color:rgba(255, 99, 71, 0.5);">...</h1>
  <h1 style="background-color:hsla(9, 100%, 64%, 0.5);">...</h1>

#+end_src

* Colors - RGB
** RGB Color Values

- =RGB= color value represents RED, GREEN, and BLUE light sources.
- =RGBA= color values is an extension of RGB with an Alpha channel (opacity).

In HTML, a color can be specified as an RGB value, using this formula.

*rgb(red, green, blue)*

Each parameter (red, green, blue) defines the intensity of the color with a value between 0 and 255,

This means that there are 256 x 256 x 256 = 16777216 possible colors!

For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255), and the other two (green and blue) are set to 0.

Another example, rgb(0, 255, 0) is displayed as green, because green is set to its highest value (255), and the other two (red and blue) are set to 0.

To display black, set all color parameters to 0, like this: rgb(0, 0, 0).

To display white, set all color parameter to 255, like this: rgb(255, 255, 255).

** Shades of Gray

Shades of gray are often defined using equal values for all three parameters.

*Example*:

- rgb(60, 60, 60)
- rgb(140, 140, 140)
- rgb(200, 200, 200)
- rgb(100, 100, 100)
- rgb(180, 180, 180)
- rgb(240, 240, 240)

** RGBA Color Values

RGBA color values are an extension of RGB color values with an Alpha channel - which specifies the opacity for a color.

An RGBA color values is specified with:

*rgba(red, green, blue, alpha)*

The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all).

* Colors - HEX
** HEX Color Values

A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green), and BB (blue) hexadecimal integers specify the components of the color.

In HTML, a color can be specified using a hexadecimal value in the form:

*#rrggbb*

Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).

For example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other two (green and blue) are set to 00.

Another example, #00ff00 is displayed as green, because green is set to its highest value (ff), and the other two (red and blue) are set to 00.

To display black, set all color parameter to 00, like this: #000000.

To display white, set all color parameters to ff, like this: #ffffff.

** Shades of Gray

Shades of gray are often defined using equal values for all three parameters:

*Example*:

- #404040
- #a0a0a0
- #dcdcdc
- #686868
- #bebebe
- #f8f8f8

* Colors - HSL
** HSL Color Values

In HTML, a color can be specified using hue, saturation, and lightness (HSL) in the form:

*hsl (/hue, saturation, lightness/)*

HSLA color values are an extension of HSL with an Alpha channel (opacity).

Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.

Saturation is a percentage value, 0% means a shade of gray, and 100% is a full color.

Lightness is also a percentage value, 0% is black, and 100% is white.

*Example*:

- hsl (0, 100%, 50%)
- hsl (147, 50%, 47%)
- hsl (39, 100%, 50%)
- hsl (240, 100%, 50%)
- hsl (300, 76%, 72%)
- hsl (248, 53%, 58%)

*Saturation*

Saturation can be described as the intensity of a color.

100% is pure color, no shades of gray

50% is 50% gray, but you can still see the color.

0% is completely gray, you can no longer see the color.

*Example*:

- hsl (0, 100%, 50%)
- hsl (0, 60%, 50%)
- hsl (0, 20%, 50%)
- hsl (0, 80%, 50%)
- hsl (0, 40%, 50%)
- hsl (0, 0%, 50%)

*Lightness*

The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) 100% means full lightness (white).

*Example*:

- hsl (0, 100%, 0%)
- hsl (0, 100%, 50%)
- hsl (0, 100%, 90%)
- hsl (0, 100%, 25%)
- hsl (0, 100%, 75%)
- hsl (0, 100%, 100%)

** Shades of Gray

Shades of gray are often defined by setting the hue and saturation to 0, and adjust the lightness from 0% to 100% to get darker/lighter shades.

*Example*:

- hsl (0, 0%, 20%)
- hsl (0, 0%, 40%)
- hsl (0, 0%, 70%)
- hsl (0, 0%, 30%)
- hsl (0, 0%, 60%)
- hsl (0, 0%, 90%)

** HSLA Color Values

HSLA color values are an extension of HSL color values with an Alpha channel which specifies the opacity for a color.

An HSLA color value is specified with:

*hsla (/hue, saturation, lightness, alpha/)*

The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):

* CSS
** What is CSS?

Cascading Style Sheets (CSS) is used to format the layout of a webpage.

With CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and much more!

*Tip*: The word *cascading* means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to "blue", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)!

** Using CSS

CSS can be added to HTML document in 3 ways.

- *Inline* - by using the =style= attribute inside HTML elements
- *Internal* - by using the =<style>= element in the =<head>= section
- *External* - by using the =<link>= element to link to an external CSS file

The most common way to add CSS, is to keep the styles in external CSS files. However, in this org-book I will be using inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself.

** Inline CSS

An inline CSS is used to apply unique style to a single HTML element.

An inline CSS uses the =style= attribute of an HTML element.

The following example sets the text color of the =<h1>= element to blue, and the text color of the =<p>= element to red.

*Example*:
#+begin_src html

  <h1 style="color:blue;">Hello World</h1>
  <p style="color:red;">Donec pretium posuere tellus.</p>

#+end_src

** Internal CSS

An internal CSS is used to define a style for a single HTML page.

An internal CSS is defined in the =<head>= section of an HTML page, within a =style= element.

The following example sets the text color of ALL the =<h1>= elements (on that page) to blue, and the text color of ALL the =<p>= elements to red. In addition, the page will be displayed with a "powderblue" background color:

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <head>
      <style>
        body {background-color: powderblue;}
        h1 {color: blue;}
        p {color: red;}
      </style>
    </head>
    <body>
      <h1>Hello World</h1>
      <p>Mauris mollis tincidunt felis.</p>
    </body>
  </html>

#+end_src

** External CSS

An external style sheet is used to define the style for many HTML pages.

To use an external style sheet, add a link to it in the =<head>= section of each HTML page.

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <head>
      <link rel="stylesheet" href="styles.css">
    </head>
    <body>
      <h1>Hello World</h1>
      <p>Donec at pede.</p>
    </body>
  </html>

#+end_src

The external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension.

Here is what the "styles.css" file looks like.

*"styles.css"*
#+begin_src css

  body {
      background-color: powderblue;
  }
  h1 {
      color:blue;
  }
  p {
      color: red;
  }

#+end_src

*Tip*: With an external style sheet, you can change the look of an entire web site, by changing on file!

** CSS Colors, Fonts and Sizes

Here, we will demonstrate some commonly used CSS properties. You will learn more about them later!

- The CSS =color= property defines the text color to be used.
- The CSS =font-family= property defines the font to be used.
- The CSS =font-size= property defines the text size to be used.

*Example*:
#+begin_src css

  h1 {
      color: blue;
      font-family: verdana;
      font-size: 300%;
  }
  p {
      color: red;
      font-family: courier;
      font-size: 160%;
  }

#+end_src

** CSS Border

The CSS =border= property defines a border around an HTML element.

*Tip*: You can define a border for nearly all HTML elements.

*Example*:
#+begin_src css

  p {
      border: 2px solid powderblue;
  }

#+end_src

** CSS Padding

The CSS =padding= property defines a padding (space) between the text and the border.

*Example*:
#+begin_src css

  p {
      border: 2px solid powderblue;
      padding: 30px;
  }

#+end_src

** CSS Margin

The CSS =margin= property defines a margin (space) outside the border.

*Example*:
#+begin_src css

  p {
      border: 2px solid powderblue;
      margin: 50px;
  }

#+end_src

** Link to External CSS

External style sheets can be refferenced with a full URL or with a path relative to the current web page.

*Example*:
#+begin_src html

  <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">

#+end_src

This example links to a style sheet located in the html folder on the current web site:

*Example*:
#+begin_src html

  <link rel="stylesheet" href="/html/styles.css">

#+end_src

This example links to a style sheet located in the same folder as the current page:

*Example*:
#+begin_src html

  <link rel="stylesheet" href="styles.css">

#+end_src

* Links
** HTML Links - Hyperlinks

HTML links are hyperlinks.

YOu can click on a link and jump to another document.

When you move the mouse over a link, the mouse arrow will turn into a little hand.

*Note*: A link does not have to be text. A link can be an image or any other HTML element!

** HTML Links - Syntax

The HTML =<a>= tag defines a hyperlink. It has the following syntax:

#+begin_src html

  <a href="url">link text</a>

#+end_src

The most important attribute of the =<a>= element is the =href= attribute,

which indicates the link's destination.

The /link text/ is the part that will be visible to the reader.

Clicking in the link text, will send the reader to the specified URL address.

*Example*:
#+begin_src html

  <a href="https://github.com/codewithjom">My GitHub</a>

#+end_src

By default, links will appear as follows in all browsers:

- An unvisited link is underlined and blue
- A visited link is underlined and purple
- An active link is underlined and red

** HTML Links - The target Attribute

By default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link.

The =target= attribute specifies where to open the linked document.

The =target= attribute can have one of the following values:

- =_self= - Default. Opens the document in the same window/tab as it was clicked.
- =_blank= - Opens the document in a new window or tab
- =_parent= - Opens the document in the parent frame
- =_top= - Opens the document in the full body of the window

Use the target="_blank" to open the linked document in a new browser window or tab:

#+begin_src html

  <a href="https://github.com/codewithjom" target="_blank">My GitHub</a>

#+end_src

** Absolute URLs vs Relative URLs

Both examples above are using an *absolute URL* (a full web address) in the =href= attribute.

A local link (a link to a page within the same website) is specified with a *relative URL* (without the "https://www" part):

#+begin_src html

  <h2>Absolute URLs</h2>
  <p><a href="https://google.com">Google</a></p>
  <p><a href="https://github.com/codewithjom">My GitHub</a></p>

  <h2>Relative URLs</h2>
  <p><a href="about.html">About Page</a></p>
  <p><a href="/css/about.css">About Page CSS</a></p>

#+end_src

** HTML Links - Use an Image as a Link

To use an image as a link, just put the =<img>= tag inside the =<a>= tag:

*Example*:
#+begin_src html

  <a>
    <img src="profile.jpg" alt="A profile picture" style="width:42px; height:42px">
  </a>

#+end_src

** Link to an Email Address

Use =mailto:= inside the =href= attribute to create a link that opens the user's email program (to let them send a new email):

*Example*:
#+begin_src html

  <a href="mailto:codewithjom@gmail.com">Send email</a>

#+end_src

** Button as a Link

To use an HTML button as a link, you have to add some JavaScript code.

JavaScript allows you to specify what happens at certain events, such as a click of a button:

*Example*:
#+begin_src html

  <button onclick="document.location='about.html'">About Page</button>

#+end_src

** Link Titles

The =title= attribute specifies extra information about an element. The information is most often shown as a tooltip text when the mouse moves over the element.

*Example*:
#+begin_src html

  <a href="https://github.com/codewithjom" title="Go to Jom's GitHub">My GitHub</a>

#+end_src

** More on Absolute URLs and Relative URLs

Use a full URL to link to a web page:
#+begin_src html

  <a href="https://github.com/codewithjom">My GitHub</a>

#+end_src

Link to a page located in the html folder on the current web site:
#+begin_src html

  <a href="/html/about.html">About Page</a>

#+end_src

Link to a page located in the same folder as the current page:
#+begin_src html

  <a href="about.html">About Page</a>

#+end_src

* Link - Colors
** HTML Link Colors

By default, a link will appear like this (in all browsers):

- An unvisited link is underlined and blue
- A visited link is underlined and purple
- An active link is underlined and red

You can change the link state colors, by using CSS:

*Example*:

Here, an unvisited link will be green with no underline. A visited link will be pink with no underline. An active link will be yellow and underlined. In addition, when mousing over a link (a:hover) it will become red and underlined.

#+begin_src html

  <style>
    a:link {
      color:green;
      background-color: transparent;
      text-decoration: none;
    }

    a:visited {
      color: pink;
      background-color: transparent;
      text-decoration: none;
    }

    a:hover {
      color: red;
      background-color: transparent;
      text-decoration: underline;
    }

    a:active {
      color: yellow;
      background-color: transparent;
      text-decoration: underline;
    }
  </style>

#+end_src

** Link Buttons

A link can also be styled as a button, by using CSS:

*Example*:
#+begin_src html

  <style>
    a:link, a:visited {
      background-color: #f44336;
      color: white;
      padding: 15px 25px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
    }

    a:hover, a:active {
      background-color: red;
    }
  </style>

#+end_src

* Link - Bookmark
** Create a Bookmark in HTML

Bookmarks can be useful if a web page is very long.

To create a bookmark - first create the bookmark, then add a link to it.

When the link is clicked, the page will scroll down or up to the location with the bookmark.

*Example*:

First, use the =id= attribute to create a bookmark.

#+begin_src html

  <h2 id="C4">Chapter 4</h2>

#+end_src

Then, add a link to the bookmark ("Jump to Chapter 4"), from within the same page.

*Example*:
#+begin_src html

  <a href="#C4">Jump to Chapter 4</a>

#+end_src

You can also add a link to a bookmark on another page.

#+begin_src html

  <a href="Demo.html#C4">Jump to Chapter 4</a>

#+end_src

* Images
** HTML Images

Images can improve the design and the appearance of a web page.

*Example*:
#+begin_src html

  <img src="profile.jpg" alt="A profile picture">

#+end_src

*Example*:
#+begin_src html

  <img src="wall.jpg" alt="Wallpaper">

#+end_src

** HTML Images Syntax

The HTML =<img>= tag is used to embed an image in a web page.

Images are not technically inserted into a web page; images are linked to web pages. The =<img>= tag creates a holding space fr the referenced image.

The =<img>= tag is empty, it contains attributes only, and does not have a closing tag.

The =<img>= tag has two required attributes:

- *src* - Specifies the path to the image
- *alt* - Specifies an alternate text for the image

*Syntax*:
#+begin_src html

  <img src="url" alt="alternatetext">

#+end_src

** The src Attribute

The required =src= attribute specifies the path (URL) to the image.

*Note*: When a web page loads, it is the browser, at that moment, that gets the image from a web server and inserts it into the page. Therefore, make sure that the image actually stays in the same spot in relation to the web page, otherwise your visitors will get a broken link icon. The broken link icon and the =alt= text are shown if the browser cannot find the image.

*Example*:
#+begin_src html

  <img src="flowers.jpg" alt="Beautiful flowers">

#+end_src

** The alt Attribute

The required =alt= attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).

*Example*:
#+begin_src html

  <img src="profile.jpg" alt="A profile picture">

#+end_src

If a browser cannot find an image, it will display the value of the =alt= attribute.

*Example*:
#+begin_src html

  <img src="wrongname.jpg" alt="A profile picture">

#+end_src

*Tip*: A screen reader is a software program that reads the HTML code, and allows the user to "listen" to the content. Screen readers are useful for people who are visually impaired or learning disabled.

** Image Size - Width and Height

You can use the =style= attribute to specify the width and height of an image.

*Example*:
#+begin_src html

  <img src="profile.jpg" alt="A profile picture" style="width:500px;height:600px;">

#+end_src

Alternatively, you can use the =width= and =height= attributes:

*Example*:
#+begin_src html

  <img src="profile.jpg" alt="A profile picture" width="500" height="600">

#+end_src

The =width= and =height= attributes always define the width and height of the image in pixels.

*Note*: Always specify the width and height of an image. If width and height are not specified, the web page might flicker while the image loads.

** Width and Height, or Style?

The =width=, =height=, and =style= attributes are all valid in HTML.

However, we suggest using the =style= attribute. It prevents style sheets from changing the size of images.

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <head>
      <style>
        img {
          width: 100%;
        }
      </style>
    </head>
    <body>

      <img src="avatar.jpg" alt="Avatar picture" width="128" height="128">

      <img src="profile.jpg" alt="A profile picture" style="width:128px;height:128px;">

    </body>
  </html>

#+end_src

** Images in Another Folder

If you have your images in a sub-folder, you must include the folder name in the =src= attribute:

*Example*:
#+begin_src html

  <img src="/images/profile.jpg" alt="A profile picture" style="width:128px;height:128px;">

#+end_src

** Images on Another Server/Website

Some web sites point to an image on another server.

To point to an image on another server, you must specify an absolute (full) URL in the =src= attribute.

*Example*:
#+begin_src html

  <img src="https://avatars.githubusercontent.com/u/102786378?v=4" alt="My profile picture">

#+end_src

*Notes on external images*: External images might be under copyright. If you do not get permission to use it, you may be in violation of copyright laws. In addition, you cannot control external images; it can suddenly be removed or changed.

** Animated Images

HTML allows animated GIFs.

*Example*:
#+begin_src html

  <img src="programming.gif" alt="Computer Man" style="width:48px;height:48px;">

#+end_src

** Image as Link

To use an image as a link, put the =<img>= tag inside the =<a>= tag.

*Example*:
#+begin_src html

  <a href="About.html"><img src="profile.jpg" alt="Link to About page" style="width:42px;height:42px;"></a>

#+end_src

** Image Floating

Use the CSS =float= property to let the image float to the right or to the left of a text.

*Example*:
#+begin_src html

  <p><img src="smiley.gif" alt="Smiley face" style="float:right;width:42px;height:42px;">The image will float to the right of the text.</p>

  <p><img src="smiley.gif" alt="Smiley face" style="float:left;width:42px;height:42px;">The image will float to the left of the text.</p>

#+end_src

** Common Image Formats

Here are the most common image file types, which are supported in all browsers (Chrome, Edge, Firefox, Safari, Opera):

| *Abbreviation* | *File Format*                           | *File Extension*                   |
|--------------+---------------------------------------+----------------------------------|
| APNG         | Animated Portable Network Graphics    | .apng                            |
| GIF          | Graphics Interchange Format           | .gif                             |
| ICO          | Microsoft Icon                        | .ico, .cur                       |
| JPEG         | Joint Photographic Expert Group image | .jpg, .jpeg, .jfif, .pjpeg, .pjp |
| PNG          | Portable Network Graphics             | .png                             |
| SVG          | Scalable Vector Graphics              | .svg                             |

* Images - Background
** Background Image on a HTML element

To add a background image on an HTML element, use the HTML =style= attribute and the CSS =background-image= property.

*Example*:
#+begin_src html

  <p style="background-image: url('background.jpg');">

#+end_src

You can also specify the background image in the =<style>= element, in the =<head>= section.

*Example*:
#+begin_src html

  <style>
    p {
      background-image: url('background.jpg');
    }
  </style>

#+end_src

** Background Image on a Page

If you want the entire page to have a background image, you must specify the background image on the =<body>= element.

*Example*:
#+begin_src html

  <style>
    body {
      background-image: url('background.jpg');
    }
  </style>

#+end_src

** Background Repeat

If the background image is smaller than the element, the image will repeat itself, horizontally and vertically, until it reaches the end of the element.

*Example*:
#+begin_src html

  <style>
    body {
      background-image: url('profile.jpg');
    }
  </style>

#+end_src

To avoid the background image from repeating itself, set the =background-repeat= property to =no-repeat=.

*Example*:
#+begin_src html

  <style>
    body {
      background-image: url('profile.jpg');
      background-repeat: no-repeat;
    }
  </style>

#+end_src

** Background Cover

If you want the background image to cover the entire element, you can set the =background-size= property to =cover=.

Also, to make sure the entire element is always covered, set the =background-attachment= property to =fixed=.

This way, the background image will cover the entire element, with no stretching (the image will keep its original proportions):

*Example*:
#+begin_src html

  <style>
    body {
      background-image: url('profile.jpg');
      background-repeat: no-repeat;
      background-attachment: fixed;
      background-size: cover;
    }
  </style>

#+end_src

** Background Stretch

If you want the background image to stretch to fit the entire element, you can set the =background-size= property to =100% 100%=

Try resizing the browser window, and you will see that the image will stretch, but always cover the entire element.

*Example*:
#+begin_src html

  <style>
    body {
      background-image: url('profile.jpg');
      background-repeat: no-repeat;
      background-attachment: fixed;
      background-size: 100% 100%;
    }
  </style>

#+end_src

* Images - The Picture Element
** The HTML <picture> Element

The HTML =<picture>= element gives web developers more flexibility in specifying image resources.

The =<picture>= element contains one or more =<source>= element, each referring to different images through the =srcset= attribute. This way the browser can choose the image that best fits the current view and/or device.

Each =<source>= element has a =media= attribute that defines when the image is the most suitable.

*Example*:

Show different images for different screen sizes:
#+begin_src html

  <picture>
    <source media="(min-width: 650px)" srcset="img_food.jpg">
    <source media="(min-width: 465px)" srcset="img_car.jpg">
    <img src="img_girl.jpg">
  </picture>

#+end_src

*Note*: Always specify an =<img>= element as the last child element of the =<picture>= element. The =<img>= element is used by browsers that do not support the =<picture>= element, or if none of the =<source>= tags matc
*Note*: Always specify an =<img>= element as the last child element of the =<picture>= element. The =<img>= element is used by browsers that do not support the =<picture>= element, or if none of the =<source>= tags match.

** When to use the Picture Element

There are two main purposes for the =<picture>= element:

*1. Bandwidth*

If you have a small screen or device, it is not necessary to load a large image file. The browser will use the first =<source>= element with matching attribute values, and ignore any of the following elements.

*2. Format Support*

Some browsers or devices may not support all image formats. By using the =<picture>= element, you can add images of all formats, and the browser will use the first format it recognizes, and ignore any of the following elements.

*Example*:

The browser will use the first image format it recognizes.

#+begin_src html

  <picture>
    <source srcset="img_avatart.png">
    <source srcset="img_girl.png">
    <img src="img_beatles.gif" alt="Beatles" style="width:auto;">
  </picture>

#+end_src

*Note*: The browser will use the first =<source>= element with matching attribute values, and ignore any following =<source>= elements.

** HTML Image Tags

| *Tag*       | *Description*                                      |
|-----------+--------------------------------------------------|
| <img>     | Defines an image                                 |
| <map>     | Defines an image map                             |
| <area>    | Defines a clickable area inside an image map     |
| <picture> | Defines a container for multiple image resources |

* Favicon
** How To Add a Favicon in HTML

You can use any image you like as your favicon. You can also create your own favicon on sites like [[https://www.favicon.cc]].

*Tip*: A favicon is a small image, so it should be a simple image with hight contrast.

A favicon image is displayed to the left of the page title in the browser tab.

To add a favicon to your website, either save your favicon image to the root directory of your webserver, or create a folder in the root directory called images, and save you favicon image in this folder. A common name for a favicon image is "favicon.ico".

Next, add a =<link>= element to your "index.html" file, after the =<title>= element, like this:

*Example*:

#+begin_src html

  <!DOCTYPE html>
  <html>
  <head>
    <title>My Page Title</title>
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
  </head>
  <body>

    <h1>This is a Heading</h1>
    <p>This is a paragraph.</p>

  </body>
  </html>

#+end_src

Now, save the "index.html" file and reload it in your browser. Your browser tab should now display your favicon image to the left of the page title.

* Tables
** Define a HTML Table

A table in HTML consist of table cells inside rows and columns.

*Example*:
#+begin_src html

  <table>
    <tr>
      <th>Company</th>
      <th>Contact</th>
      <th>Country</th>
    </tr>
    <tr>
      <td>Alfred Futterkiste</td>
      <td>Maria Anders</td>
      <td>Germany</td>
    </tr>
    <tr>
      <td>Centro commercial Moctezuma</td>
      <td>Francisco Chang</td>
      <td>Mexico</td>
    </tr>
  </table>

#+end_src

** Table Cells

Each table cell is defined by a =<td>= and a =</td>= tag.

=td= stands for table data.

Everything between =<td>= and =</td>= are the content of the table cell.

*Example*:
#+begin_src html

  <table>
    <tr>
      <td>Emil</td>
      <td>Tobias</td>
      <td>Linus</td>
    </tr>
  </table>

#+end_src

*Note*: Table data elements are the data containers of the table. They can contain all sorts of HTML elements; text, images, list, other tables, etc.

** Table Rows

Each table row starts with a =<tr>= and end with a =</tr>= tag.

=tr= stands for table row.

*Example*
#+begin_src html

  <table>
    <tr>
      <td>Emil</td>
      <td>Tobias</td>
      <td>Linus</td>
    </tr>
    <tr>
      <td>16</td>
      <td>14</td>
      <td>10</td>
    </tr>
  </table>

#+end_src

You can have as many rows as you like in a table, just make sure that the number of cells are the same in each row.

*Note*: There are times where a row can havee less or more cells that another.

** Table Headers

Sometimes you want your cells to be headers, in those cases use the =<th>= tag instead of the =<td>= tag.

*Example*:

Let the first row be table headers

#+begin_src html

  <table>
    <tr>
      <th>Person 1</th>
      <th>Person 2</th>
      <th>Person 3</th>
    </tr>
    <tr>
      <td>Emil</td>
      <td>Tobias</td>
      <td>Linus</td>
    </tr>
    <tr>
      <td>16</td>
      <td>14</td>
      <td>10</td>
    </tr>
  </table>


#+end_src

By default, the text in =<th>= elements are bold and centered, but you can change that with CSS.

** HTML Table Tags

| *Tag*        | *Desciption*                                                              |
|------------+-------------------------------------------------------------------------|
| <table>    | Defines a table                                                         |
| <th>       | Defines a header cell in a table                                        |
| <tr>       | Defines a row in a table                                                |
| <td>       | Defines a cell in a table                                               |
| <caption>  | Defines a table caption                                                 |
| <colgroup> | Specifies a group of one ore more columns in a table for formatting     |
| <col>      | Specifies column properties for each column within a <colgroup> element |
| <thead>    | Groups the header content in a table                                    |
| <tbody>    | Groups the body content in a table                                      |
| <tfoot>    | Groups the footer content in a table                                    |

* Table - Border
** How to Add a Border

When you add a border to a table, you also add borders around each table cell:

To add a border, use the CSS =border= property on =table=, =th=, and =td= elements.

*Example*:

#+begin_src css

  table, th, td {
      border: 1px solid black;
  }

#+end_src

** Collapsed Table Borders

To avoid having double borders like in the example above, set the CSS =broder-collapse= property to =collapse=.

This will make the borders collapse into a single border.

*Example*:
#+begin_src css

  table, th, td {
      border: 1px solid black;
      border-collapse: collapse;
  }

#+end_src

** Style Table Borders

If you set a background color of each cell, and give the border a white color (the same as the document background), you get the impression of an invisible border.

*Example*:
#+begin_src css

  table, th, td {
      border: 1px solid white;
      border-collapse: collapse;
  }

  th, td {
      background-color: #96D4D4
  }

#+end_src

** Round Table Borders

With the =border-radius= property, the borders get rounded corners.

*Example*:
#+begin_src css

  table, th, td {
      border: 1px solid black;
      border-radius: 10px;
  }

#+end_src

Skip the border around the table by leaving out =table= from the css selector:

*Example*:
#+begin_src css

  th, td {
      border: 1px solid black;
      border-radius: 10px;
  }

#+end_src

** Dotted Table Borders

With the =border-style= property, you can set the appearance of the border.

The following values are allowed:

- =dotted=
- =dashed=
- =solid=
- =double=
- =groove=
- =ridge=
- =inset=
- =outset=
- =none=
- =hidded=

** Border Color

With the =border-color= property, you can set the color of the border.

*Example*:
#+begin_src css

  th, td {
      border-color: #96D4d4;
  }

#+end_src

* Table - Sizes
** HTML Table Width

HTML table can have different sizes for each column, row or the entire table.

Use the =style= attribute with the =width= or =height= properties to specify the size of a table, row or column.

To set the width of a table, add the =style= attribute to the =<table>= element:

*Example*:

Set the width of the table to 100%.

#+begin_src html

  <table style="width:100%">
    <tr>
      <th>Firstname</th>
      <th>Lastname</th>
      <th>Age</th>
    </tr>
    <tr>
      <td>Jill</td>
      <td>Smith</td>
      <td>50</td>
    </tr>
    <tr>
      <td>Eve</td>
      <td>Jackson</td>
      <td>94</td>
    </tr>
  </table>

#+end_src

*Note*: Using a percentage as the size unit for a width means how wide will this element be compared to its parent element, which in this case is the =<body>= element.

** HTML Table Column Width

To set the size of a specific column, add the =style= attribute on a =<th>= or =<td>= element.

*Example*:

Set the width of the first column to 70%.

#+begin_src html

  <table style="width:100%">
    <tr>
      <th style="width:70%">Firstname</th>
      <th>Lastname</th>
      <th>Age</th>
    </tr>
    <tr>
      <td>Jill</td>
      <td>Smith</td>
      <td>50</td>
    </tr>
    <tr>
      <td>Eve</td>
      <td>Jackson</td>
      <td>94</td>
    </tr>
  </table>

#+end_src

** HTML Table Row Height

To set the height of a specific row, add the =style= attribute on a table row element.

*Example*:

Set the height of the second row to 200 pixels.

#+begin_src html

  <table style="width:100%">
    <tr>
      <th>Firstname</th>
      <th>Lastname</th>
      <th>Age</th>
    </tr>
    <tr style="height:200px">
      <td>Jill</td>
      <td>Smith</td>
      <td>50</td>
    </tr>
    <tr>
      <td>Eve</td>
      <td>Jackson</td>
      <td>94</td>
    </tr>
  </table>

#+end_src

* Table - Headers
** HTML Table Headers

HTML tables can have headers for each column or row, or for many columns/rows.

Table headers are defined with =th= elements, each =th= element represents a table cell.

*Example*:
#+begin_src html

  <table>
    <tr>
      <th>Firstname</th>
      <th>Lastname</th>
      <th>Age</th>
    </tr>
    <tr>
      <td>Jill</td>
      <td>Smith</td>
      <td>50</td>
    </tr>
    <tr>
      <td>Eve</td>
      <td>Jackson</td>
      <td>94</td>
    </tr>
  </table>

#+end_src

** Vertical Table Headers

To use the first column as table headers, define the first cell in each row as a =th= element.

*Example*:
#+begin_src html

  <table>
    <tr>
      <th>Firstname</th>
      <td>Jill</td>
      <td>Eve</td>
    </tr>
    <tr>
      <th>Lastname</th>
      <td>Smith</td>
      <td>Jackson</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>94</td>
      <td>50</td>
    </tr>
  </table>

#+end_src

** Align Table Headers

By default, table headers are bold and centered.

To left-align the table headers, use the CSS =text-align= property.

*Example*:
#+begin_src css

  th {
      text-align: left;
  }

#+end_src

** Header for Multiple Columns

You can have a header that spans over two or more columns

To do this, use the =colspan= attribute on the =<th>= element:

*Example*:
#+begin_src html

  <table>
    <tr>
      <th colspan="2">Name</th>
      <th>Age</th>
    </tr>
    <tr>
      <td>Jill</td>
      <td>Smith</td>
      <td>50</td>
    </tr>
    <tr>
      <td>Eve</td>
      <td>Jackson</td>
      <td>94</td>
    </tr>
  </table>

#+end_src

** Table Caption

You can add a caption that serves as a heading for the entire table.

To add a caption to a table, use the =<caption>= tag:

*Example*:
#+begin_src html

  <table style="width:100%;">
    <caption>Monthly Savings</caption>
    <tr>
      <th>Month</th>
      <th>Savings</th>
    </tr>
    <tr>
      <td>January</td>
      <td>$100</td>
    </tr>
    <tr>
      <td>February</td>
      <td>$50</td>
    </tr>
  </table>

#+end_src

*Note*: The =<caption>= tag should be inserted immediately after the =<table>= tag.

* Table - Padding and Spacing
** HTML Table - Cell Padding

HTML table can adjust the padding inside the cells, and also the space between the cells.

Cell padding is the space between the cell edges and the cell content.

By default the padding is set to 0.

To add padding on table cells, use the CSS =padding= property.

*Example*:
#+begin_src css

  th, td {
      padding: 15px;
  }

#+end_src

To add padding only above the content, use the =padding-top= property.

The other sides with the =padding-bottom=, =padding-left=, and =padding-right= properties.

*Example*:
#+begin_src css

  th, td {
      padding-top: 10px;
      padding-bottom: 20px;
      padding-left: 30px;
      padding-right: 40px;
  }

#+end_src

** HTML Table - Cell Spacing

Cell spacing is the space between each cell.

By default the space is set to 2 pixels.

To change the space between table cells, use the CSS =border-spacing= property on the =table= element.

*Example*:
#+begin_src css

  table {
      border-spacing: 30px;
  }

#+end_src

* Table - Colspan and Rowspan
** HTML Table - Colspan

HTML tables can have cells that spans over multiple rows and/or columns.

To make a cell span over multiple columns, use the =colspan= attribute.

*Example*:
#+begin_src html

  <table>
    <tr>
      <th colspan="2">Name</th>
      <th>Age</th>
    </tr>
    <tr>
      <td>Jill</td>
      <td>Smith</td>
      <td>43</td>
    </tr>
    <tr>
      <td>Eve</td>
      <td>Jackson</td>
      <td>57</td>
    </tr>
  </table>

#+end_src

*Note*: The value of the =colspan= attribute represents the number of columns to span.

** HTML Table - Rowspan

To make a cell span over multiple rows, use the =rowspan= attribute:

*Example*:
#+begin_src html

  <table>
    <tr>
      <th>Name</th>
      <th>Jill</th>
    </tr>
    <tr>
      <th rowspan="2">Phone</th>
      <th>555-1234</th>
    </tr>
    <tr>
      <td>555-8745</td>
    </tr>
  </table>

#+end_src

*Note*: The value of the =rowspan= attribute represents the number of rows to span.

* Table - Styling
** HTML Table - Zebra Stripes

Use CSS to make your table look better.

If you add a background color on every other table row, you will get a nice zebra stripes effect.

To style every other table row element, use the =:nth-child(even)= selector like this:

#+begin_src css

  tr:nth-child(even) {
      background-color: #D6EEEE;
  }

#+end_src

*Note*: If you use =(odd)= instead of =(even)=, the styling will occur on row 1,3,5 etc. instead of 2,4,6 etc.

** HTML Table - Vertical Zebra Stripes

To make vertical zebra stripes, style every other /column/, instead of every other /row/.

Set the =:nth-child(even)= for table data elements like this:

#+begin_src css

  td:nth-child(even), th:nth-child(even) {
      background-color: #D6EEEE;
  }

#+end_src

*Note*: Put the =:nth-child()= selector on both =th= and =td= elements if you want to have the styling on both headers and regular table cells.

** Combine Vertical and Horizontal Zebra Stripes

You can combine the styling from the two examples above and you will have stripes on every other row and every other column.

If you use a transparent color you will get an overlapping effect.

Use =rgba()= color to specify the transparency of the color:

*Example*:
#+begin_src css

  tr:nth-child(even) {
      background-color: rgba(150, 212, 212, 0.4);
  }

  th:nth-child(even), td:nth-child(even) {
      background-color: rgba(150, 212, 212, 0.4);
  }

#+end_src

** Horizontal Dividers

If you specify borders only at the bottom of each table row, you will have a table with horizontal dividers.

Add the =border-bottom= property to all =tr= elements to get horizontal dividers.

*Example*:
#+begin_src css

  tr {
      border-bottom: 1px solid #ddd;
  }

#+end_src

** Hoverable Table

Use the =:hover= selector on =tr= to highlight table rows on mouse over:

*Example*:
#+begin_src css

  tr:hover {
      background-color: #D6EEEE;
  }

#+end_src

* Table - Colgroup
** HTML Table Colgroup

The =<colgroup>= element is used to style specific columns of a table.

If you want to style the two first columns of a table, use the =<colgroup>= and =<col>= elements.

The =<colgroup>= element should be used as a container for the column specifications.

Each group are specified with a =<col>= element.

The =span= attribute specifies how columns that gets the style.

The =style= attribute specifies the style to give the columsn.

*Note*: There is a very limited selection of _legal CSS properties for colgroups_.

*Example*:
#+begin_src html

  <table>
    <colgroup>
      <col span="2" style="background-color: #D6EEEE;">
    </colgroup>
    <tr>
      <th>MON</th>
      <th>TUE</th>
      <th>WED</th>
      <th>THU</th>
    </tr>
  </table>

#+end_src

*Note*: The =<colgroup>= tag must be a child of a =<table>= element and should be placed before any other table elements, like =<thead>=, =<tr>=, =<td>= etc., but after the =<caption>= element, if present.

** Legal CSS Properties

There are only a very limited selection of CSS properties that are allowed to be used in the colgroup:

=width= property
=visibility= property
=background= properties
=border= properties

All other CSS properties will have no effect on your tables.

** Multiple Col Elements

If you want to style more columns with different styles, use more =<col>= elements inside the =<colgroup>=:

*Example*:
#+begin_src html

  <table>
    <colgroup>
      <col span="2" style="background-color: #D6EEEE;">
      <col span="3" style="background-color: pink;">
    </colgroup>
    <tr>
      <th>MON</th>
      <th>TUE</th>
      <th>WED</th>
      <th>THU</th>
    ...

#+end_src

** Empty Colgroups

If you want to style columns in the middle of a table, insert an "empty" =<col>= element (with no styles) for the columns before.

*Example*:
#+begin_src html

  <table>
    <colgroup>
      <col span="3">
      <col span="2" style="background-color: pink">
    </colgroup>
    <tr>
      <th>MON</th>
      <th>TUE</th>
      <th>WED</th>
      <th>THU</th>
    ...

#+end_src

** Hide Columns

You can hide columns with the =visibility: collapse= property:

*Example*:
#+begin_src html

  <table>
    <colgroup>
      <col span="3">
      <col span="2" style="visibility: collapse">
    </colgroup>
    <tr>
      <th>MON</th>
      <th>TUE</th>
      <th>WED</th>
      <th>THU</th>
    ...

#+end_src

* Lists
** Unordered HTML List

An unordered list starts with the =<ul>= tag. Each list item starts with the =<li>= tag.

The list items will be marke with bullets (small black circles) by default.

*Example*:
#+begin_src html

  <ul>
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

** Ordered HTML List

An ordered list starts with the =<ol>= tag. Each list item starts with the =<li>= tag.

The list items will be marked with numbers by default.

*Example*:
#+begin_src html

  <ol>
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

** HTML Description Lists

HTML also supports description lists.

A description list is a list of terms, with a description of each term.

The =<dl>= tag defines the description list, the =<dt>= tag defines the term (name), and the =<dd>= tag describes each term.

*Example*:
#+begin_src html

  <dl>
    <dt>Coffee</dt>
    <dd>- black hot drink</dd>
    <dt>Milk</dt>
    <dd>- white cold drink</dd>
  </dl>

#+end_src

** HTML List Tags

| *Tag*  | *Description*                              |
| <ul> | Defines an unordered list                |
| <ol> | Defines an ordered list                  |
| <li> | Defines a list items                     |
| <dl> | Defines a desciption list                |
| <dt> | Defines a term in a description list     |
| <dd> | Describes the term in a description list |

* Lists - Unordered List
** Unordered HTML List

An unordered list starts with the =<ul>= tag. Each list item starts with the =<li>= tag.

The list items will be marke with bullets (small black circles) by default.

*Example*:
#+begin_src html

  <ul>
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

** Unordered HTML List - Choose List Item Marker

The CSS =list-style-type= property is used to define the style of the list item marker. It can have one of the following values.

| *Value*  | *Description*                                     |
| disc   | Sets the list item marker to a bullet (default) |
| circle | Sets the list item marker to a circle           |
| square | Sets the list item marker to a square           |
| none   | The list items will not be marked               |

*** Disc

#+begin_src html

  <ul style="list-style-type:disc;">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

*** Circle

#+begin_src html

  <ul style="list-style-type:circle;">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

*** Square

#+begin_src html

  <ul style="list-style-type:square;">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

*** None

#+begin_src html

  <ul style="list-style-type:none;">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

** Nested HTML Lists

List can be nested (list inside list).

*Example*:
#+begin_src html

  <ul>
    <li>Coffee</li>
    <li>Tea
      <ul>
        <li>Black tea</li>
        <li>Green tea</li>
      </ul>
    </li>
    <li>Milk</li>
  </ul>

#+end_src

*Note*: A list item (=<li>=) can contain a new list, and other HTML elements like images and links etc.

** Horizontal List with CSS

HTML lists can be styled in many different ways with CSS.

One popular way is to style a list horizontally, to create a navigation menu.

*** HTML

#+begin_src html

  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>nav bar</title>
    </head>
    <body>
      <ul>
        <li><a href="#home">Home</a></li>
        <li><a href="#news">News</a></li>
        <li><a href="#contact">Contact</a></li>
        <li><a href="#about">About</a></li>
      </ul>
    </body>
  </html>

#+end_src

*** CSS

#+begin_src css

  ul {
      list-style-type: none;
      margin: 0;
      padding: 0;
      overflow: hidden;
      background-color: #333333;
  }

  li {
      float: left;
  }

  li a {
      display: block;
      color: white;
      text-align: center;
      padding: 16px;
      text-decoration: none;
  }

  li a:hover {
      background-color: #111111;
  }

#+end_src

* Lists - Ordered Lists
** Ordered HTML List

An ordered list starts with the =<ol>= tag. Each list item starts with the =<li>= tag.

The list items will be marked with numbers by default.

*Example*:
#+begin_src html

  <ol>
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

** Ordered HTML List - The Type Attribute

The =type= attribute of the =<ol>= tag, defines the type of the list item marker.

| *Type*     | *Description*                                                  |
| type="1" | The list items will be numbered with numbers (default)       |
| type="A" | The list items will be numbered with uppercase letters       |
| type="a" | The list items will be numbered with lowercase letters       |
| type="I" | The list items will be numbered with uppercase roman numbers |
| type="i" | The list items will be numbered with lowercase roman numbers |

*** Numbers

#+begin_src html

  <ol type="1">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

*** Uppercase Letters

#+begin_src html

  <ol type="A">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

*** Lowercase Letters

#+begin_src html

  <ol type="a">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

*** Uppercase Roman Numbers

#+begin_src html

  <ol type="I">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

*** Lowercase Roman Numbers

#+begin_src html

  <ol type="i">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

** Control List Counting

By default, an ordered list will start counting from 1. If you want to start counting from a specific number, you can use the =start= attribute.

*Example*:
#+begin_src html

  <ol start="50">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

** Nested HTML Lists

List can be nested (list inside list).

*Example*:
#+begin_src html

  <ol>
    <li>Coffee</li>
    <li>Tea
      <ol>
        <li>Black tea</li>
        <li>Green tea</li>
      </ol>
    </li>
    <li>Milk</li>
  </ol>

#+end_src

*Note*: A list item (=<li>=) can contain a new list, and other HTML elements, like images and links, etc.

* Lists - Other Lists
** HTML Description Lists

HTML also supports description lists.

A description list is a list of terms, with a description of each term.

The =<dl>= tag defines the description list, the =<dt>= tag defines the term (name), and the =<dd>= tag describes each term.

*Example*:
#+begin_src html

  <dl>
    <dt>Coffee</dt>
    <dd>- black hot drink</dd>
    <dt>Milk</dt>
    <dd>- white cold drink</dd>
  </dl>

#+end_src

* Block and Inline
** Block-level Elements

Every HTML element has a default display value, depending on what type of element it is.

There are two display values: block and inline.

A block-level element always takes up the full width available (stretches out to the left and right as far as it can).

Two commonly used block elements are: =<p>= and =<div>=.

The =<p>= element defines a paragraph in an HTML document.

The =<div>= element defines a division or a section in an HTML document.

*Example*:
#+begin_src html

  <p>Hello World</p>
  <div>Hello World</div>

#+end_src

Here are the block-level elements in HTML.

+ <address>
+ <canvas>
+ <dt>
+ <footer>
+ <hr>
+ <noscript>
+ <section>
+ <video>
+ <article>
+ <dd>
+ <fieldset>
+ <form>
+ <li>
+ <ol>
+ <table>
+ <aside>
+ <div>
+ <figcaption>
+ <h1> - <h6>
+ <main>
+ <tfoot>
+ <blockquote>
+ <dl>
+ <figure>
+ <header>
+ <nav>
+ <pre>
+ <ul>

** Inline Elements

An inline element does not start on a new line.

An inline element only takes up as much width as necessary.

*Example*:
#+begin_src html

  <span>Hello World</span>

#+end_src

Here are the inline element in HTML.

+ <a>
+ <bdo>
+ <cite>
+ <i>
+ <label>
+ <q>
+ <small>
+ <sup>
+ <var>
+ <abbr>
+ <big>
+ <code>
+ <img>
+ <map>
+ <samp>
+ <span>
+ <textarea>
+ <acronym>
+ <br>
+ <dfn>
+ <input>
+ <object>
+ <script>
+ <strong>
+ <time>
+ <b>
+ <button>
+ <em>
+ <kbd>
+ <output>
+ <select>
+ <sub>
+ <tt>

*Note*: An inline element cannot contain a block-level element!

** The <div> Element

The =<div>= element is often used as a container for other HTML elements.

The =<div>= element has no required attributes, but =style=, =class=, and =id= are common.

When used together with CSS, the =<div>= element can be used to style blocks of content.

*Example*:
#+begin_src html

  <div style="background-color:black;color:white;padding:20px;">
    <h2>London</h2>
    <p>
      London is the capital city of England. It is the most popular city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.
    </p>
  </div>

#+end_src

** The <span> Element

The =<span>= element is an inline container used to mark up a part of a text, or a part of a document.

The =<span>= element has no required attribute, but =style=, =class= and =id= are common.

When used together with CSS, the =<span>= element can be used to style parts of the text.

*Example*:
#+begin_src html

  <p>
    My mother has
    <span style="color:blue;font-weight:bold;">
      blue
    </span>
    eyes and my father has
    <span style="color:darkolivegreen;font-weight:bold;">
      dark green
    </span>
    eyes.
  </p>

#+end_src

* Classes
** Using The class Attribute

The HTML =class= attribute is used to specify a class for an HTML element.

Multiple HTML elements can share the same class.

The =class= attribute is often used to point to a class name in a style sheet. It can also be used by a JavaScript to access and manipulate elements with the specific class name.

In the following example we have three =<div>= elements with a =class= attribute with the value of "city". All of the three =<div>= elements will be styled equally according to the =.city=.

*HTML*:

#+begin_src html

  <div class="city">
    <h2>London</h2>
    <p>London is the capital of England.</p>
  </div>

  <div class="city">
    <h2>Paris</h2>
    <p>Paris is the capital of France.</p>
  </div>

  <div class="city">
    <h2>Tokyo</h2>
    <p>Tokyo is the capital of Japan.</p>
  </div>

#+end_src

*CSS*

#+begin_src css

  .city {
      background-color: tomato;
      color:white;
      border: 2px solid black;
      margin: 20px;
      padding: 20px;
  }

#+end_src

In the following example we have two =<span>= elements with a =class= attribute with the value of "note". Both =<span>= elements will be styled equally according to the =.note=.

*HTML*

#+begin_src html

  <h1>My <span class="note">Important</span> Heading</h1>
  <p>This is some <span class="note">important</span> text.</p>

#+end_src

*CSS*

#+begin_src css

  .note {
      font-size: 120%;
      color: red;
  }

#+end_src

*Tip*: The =class= attribute can be used on /any/ HTML element.

*Note*: The class name is case sensitive!

** The Syntax For Class

To create a class; write a period (.) character, followed by a class name. Then, define the CSS properties within curly braces {}.

*HTML*:

#+begin_src html

  <div class="city">
    <h2>London</h2>
    <p>London is the capital of England.</p>
  </div>

  <div class="city">
    <h2>Paris</h2>
    <p>Paris is the capital of France.</p>
  </div>

  <div class="city">
    <h2>Tokyo</h2>
    <p>Tokyo is the capital of Japan.</p>
  </div>

#+end_src

*CSS*

#+begin_src css

  .city {
      background-color: tomato;
      color:white;
      border: 2px solid black;
      margin: 20px;
      padding: 20px;
  }

#+end_src

** Multiple Classes

HTML elements can belong to more than one class.

To define multiple classes, separate the class names with a space, e.g. <div class="city main">. The element will be styled according to all the classes specified.

In the following example, the first =<h2>= element belongs to both the =city= class and also to the =main= class, and will get the CSS styles from both of the classes.

*Example*:
#+begin_src html

  <h2 class="city main">London</h2>
  <h2 class="city">Paris</h2>
  <h2 class="city">Tokyo</h2>

#+end_src

** Different Elements Can Share Same Class

Different HTML elements can point to the same class name.

In the following example, both =<h1>= and =<p>= points to the "city" class and will share the same style.

*Example*:
#+begin_src html

  <h2 class="city">Paris</h2>
  <p class="city">Paris is the capital of France.</p>

#+end_src

** Use of The class Attribute in JavaScript

The class name can also be used by JavaScript to perform certain tasks for specific elements.

JavaScript can access elements with a specific class name with the =getElementByClassName()= method:

*Example*:

Click on a button to hide all elements with the class name "city".

#+begin_src javascript

  function myFunction() {
      var x = document.getElementByClassName("city");
      for (var i = 0; i < x.length; i++) {
          x[i].style.display = "none";
      }
  }

#+end_src

* Id
** Using The id Attribute

The HTML =id= attribute is used to specify a unique id for a HTML element.

You cannot have more than one element with the same id in an HTML document.

The =id= attribute specifies a unique id for a HTML element. The value of the =id= attribute must be unique within the HTML document.

The =id= attribute is used to point to a specific style declaration in a style sheet. It is also used by JavaScript to access and manipulate the element with the specific id.

The syntax for id is: write a hash character (#), followed by an id name. Then, define the CSS properties within curly braces {}.

In the following example we have an =<h1>= element that points to the id name "myHeader". This =<h1>= element will be styled according to the =#myHeader= style definition in the head section.

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <head>
      <style>
        #myHeader {
          background-color: lightblue;
          color: black;
          padding: 40px;
          text-align: center;
        }
      </style>
    </head>
    <body>

      <h1 id="myHeader">Hello World</h1>

    </body>
  </html>

#+end_src

*Note*: The id name is case sensitive!

*Note*: The id name must contain at least one character, cannot start with a number, and must not contain whitespaces (spaces, tabs, etc.).

** Difference Between Class and ID

A class name can be used by multiple HTML elements, while an id name must only be used by one HTML element within the page.

*Example*:
#+begin_src html

  <style>
    /* Style the element with the id "myHeader" */
    #myHeader {
      background-color: lightblue;
      color: black;
      padding: 40px;
      text-align: center;
    }

    /* Style all elements with the class name "city" */
    .city {
      background-color: tomato;
      color: white;
      padding: 10px;
    }
  </style>

  <!-- An element with a unique id -->
  <h1 id="myHeader">My Cities</h1>

  <!-- Multiple elements with same class -->
  <h2 class="city">London</h2>
  <p>London is the capital of England.</p>

  <h2 class="city">Paris</h2>
  <p>Paris is the capital of France.</p>

  <h2 class="city">Tokyo</h2>
  <p>Tokyo is the capital of Japan.</p>

#+end_src

** HTML Bookmarks with ID and Links

HTML bookmarks are used to allow readers to jump to specific parts of a webpage.

Bookmarks can be useful if your page is very long.

To use a bookmark, you must first create it, and then add a link to it.

Then, when the link is clicked, the page will scroll to the location with the bookmark.

*Example*:

First, create a bookmark with the =id= attribute.

#+begin_src html

  <h2 id="C4">Chapter 4</h2>

#+end_src

Then, add a link to the bookmark ("Jump to Chapter 4"), from within the same page.

#+begin_src html

  <a href="#C4">Jump to Chapter 4</a>

#+end_src

Or, add a link to the bookmark ("Jump to Chapter 4"), from another page.

#+begin_src html

  <a href="book.html#C4">Jump to Chapter 4</a>

#+end_src

** Using The id Attribute in JavaScript

The =id= attribute can also be used by JavaScript to perform some tasks for that specific element.

JavaScript can access an element with a specific id with the =getElementById()= method.

*Example*:

Use the =id= attribute to manipulate text with JavaScript.

#+begin_src javascript

  function displayResult() {
      document.getElementById("myHeader").innerHTML = "Have a nice day!"
  }

#+end_src

* Iframes
** HTML Iframe Syntax

An HTML iframe is used to display a web page within a web page.

The HTML =<iframe>= tag specifies an inline frame.

An inline frame is used to embed another document within the current HTML document.

*Syntax*:
#+begin_src html

  <iframe src="url" title="description"></iframe>

#+end_src

*Tip*: It is a good practice to always include a =title= attribute for the =<iframe>=. This is used by screen readers to read out what the content of the iframe is.

** Iframe - Set Height and Width

Use the =height= and =width= attributes to specify the size of the iframe.

The height and width are specified in pixels by default.

*Example*:
#+begin_src html

  <iframe src="demo_iframe.html" height="200" width="300" title="Iframe Example"></iframe>

#+end_src

Or you can add the =style= attribute and use the CSS =height= and =width= properties.

*Example*:
#+begin_src html

  <iframe src="demo_iframe.html" style="height:200px;width:300px;" title="Iframe Example"></iframe>

#+end_src

** Iframe - Remove the Border

By default, an iframe has a border around it.

To remove the border, and the =style= attribute and use the CSS =border= property.

*Example*:
#+begin_src html

  <iframe src="demo_iframe.html" style="border:none;" title="Iframe Example"></iframe>

#+end_src

With CSS, you can also change the size, style and color of the iframe's border.

*Example*:
#+begin_src html

  <iframe src="demo_iframe.html" style="border:2px solid red;" title="Iframe Example"></iframe>

#+end_src

** Iframe - Target for a Link

An iframe can be used as the target frame for a link

The =target= attrbute of the link must refer to the =name= attribute of the iframe.

*Example*:
#+begin_src html

  <iframe src="demo_iframe.html" name="iframe_a" title="Iframe Example"></iframe>

  <p><a href="https://www.w3schools.com" target="iframe_a">W3Schools.com</a></p>

#+end_src

* JavaScript
** The HTML <script> Tag

JavaScript makes HTML pages more dynamic and interactive.

The HTML =<script>= tag is used to define a client-side script (JavaScript).

The =<script>= element either contains script statements, or it points to an external script file through the =src= attribute.

Common uses for JavaScript are image manipulation, form validation, and dynamic changes of content.

To select an HTML element, JavaScript most often uses the =document.getElementById()= method.

This JavaScript example writes "Hello JavaScript!" into an HTML element with id="demo".

*Example*:
#+begin_src html

  <script>
    document.getElementById("demo").innerHTML = "Hello JavaScript!";
  </script>

#+end_src

** A Taste of JavaScript

Here are some examples of what JavaScript can do.

*Example*:

JavaScript can change content.

#+begin_src javascript

  document.getElementById("demo").innerHTML = "Hello JavaScript!";

#+end_src

*Example*:

JavaScript can change styles:

#+begin_src javascript

  document.getElementById("demo").style.fontSize = "25px";
  document.getElementById("demo").style.color = "red";
  document.getElementById("demo").style.backgroundColor = "yellow";

#+end_src

*Example*:

JavaScript can change attributes:

#+begin_src javascript

  document.getElementById("image").src = "picture.gif";

#+end_src

** The HTML <noscript> Tag

The HTML =<noscript>= tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support scripts.

*Example*:

#+begin_src html

  <script>
    document.getElementById("demo").innerHTML = "Hello JavaScript!";
  </script>

  <noscript>Sorry, your browser does not support JavaScript!</noscript>

#+end_src

* File Paths
** File Path Examples

A file path describes the location of a file in a web site's folder structure.

| *Path*                         | *Description*                                                  |
|------------------------------+--------------------------------------------------------------|
| <img src="picture.jpg">      | The file is located in the same folder as the current page   |
| <img src="img/picture.jpg">  | The file is located in the img folder in the current folder  |
| <img src="/img/picture.jpg"> | The file is located in the img folder at the root of the web |
| <img src="../picture.jpg">   | The file is located one level up from the current folder     |

** HTML File Paths

A file path describes the location of a file in a web site's folder structure.

File paths are used when linking to external files like:

- Web pages
- Images
- Style sheets
- JavaScript

** Absolute File Paths

An absolute file path is the full URL to a file.

*Example*:
#+begin_src html

  <img src="https://www.w3schools.com/images/picture.jpg" alt="Mountain">

#+end_src

** Relative File Paths

A relative file path points to a file relative to the current page.

In the following example, the file path points to a file in the images folder located at the root of the current web.

*Example*:
#+begin_src html

  <img src="/images/picture.jpg" alt="Mountain">

#+end_src

In the following example, the file path points to a file in the images folder located in the current folder.

*Example*:
#+begin_src html

  <img src="images/picture.jpg" alt="Mountain">

#+end_src

In the following example, the file path points to a file in the images folder located in the folder one level up from the current folder.

*Example*:
#+begin_src html

  <img src="../images/picture.jpg" alt="Mountain">

#+end_src

** Best Practice

It is best practice to use relative file paths (if possible).

When using relative file paths, you web pages will not be bound to your current base URL. All links will work on you own computer (localhost) as well as on you current public domain and you future public domains.

* Head
** The HTML <head> Element

The HTML =<head>= element is a container for the following elements: =<title>=, =<style>=, =<meta>=, =<link>=, =<script>=, and =<base>=.

The =<head>= element is a container for metadata (data about data) and is placed between the =<html>= tag and the =<body>= tag.

HTML metadata is data about the HTML document. Metadata is not displayed.

Metadata typically define the document title, character set, styles, scripts, and other meta information.

** The HTML <title> Element

The =<title>= element defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab.

The =<title>= element is required in HTML documents!

The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.

The =<title>= element:

- Defines a title in the browser toolbar
- Provides a title for the page when it is added to favorites
- Displays a title for the page in search engine-results

So, try to make the title as accurate and meaningful as possible!

A simple HTML document:

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html>
    <head>
      <title>TITLE</title>
    </head>
    <body>

      The content of the document...

    </body>
  </html>

#+end_src

** The HTML <style> Element

The =<style>= element is used to define a style information for a single HTML page.

*Example*:
#+begin_src html

  <style>
    body {
      background-color: powderblue;
    }
    h1 {
      color: red;
    }
    p {
      color: blue;
    }
  </style>

#+end_src

** The HTML <link> Element

The =<link>= element defines the relationship between the current document and an external resource.

The =<link>= tag is most often used to link to external style sheets:

*Example*:
#+begin_src html

  <link rel="stylesheet" href="mystyle.css">

#+end_src

** The HTML <meta> Element

The =<meta>= element is typically used to specify the character set, page desciption, keywords, author of the document, and viewport settings.

The metadata will not be displayed on the page, but are used by browsers (how to display content or reload page), by search engines (keywords), and other web services.

+ Define the character set used:

#+begin_src html

  <meta charset="UTF-8">

#+end_src

+ Define keywords for search engines:

#+begin_src html

  <meta name="keywords" content="HTML, CSS, JavaScript">

#+end_src

+ Define a description of your web page:

#+begin_src html

  <meta name="description" content="I am learning in Emacs">

#+end_src

+ Define the author of a page:

#+begin_src html

  <meta name="author" content="Jom Dollesin">

#+end_src

+ Refresh document every 30 seconds:

#+begin_src html

  <meta http-equiv="refresh" content="30">

#+end_src

+ Setting the viewport to make your website look good on all devices:

#+begin_src html

  <meta name="viewport" content="width=device-width, initial-scale=1.0">

#+end_src

Example of =<meta>= tags:

#+begin_src html

  <meta charset="UTF-8">
  <meta name="description" content="I am learning in Emacs">
  <meta name="keywords" content="HTML, CSS, JavaScript">
  <meta name="author" content="Jom Dollesin">

#+end_src

** Setting The Viewport

The viewport is the user's visible area of a web page. It varies with the device it will be smaller on a mobile phone than on a computer screen.

You should include the following =<meta>= element in all you web pages:

#+begin_src html

  <meta name="viewport" content="width=device-width, initial-scale=1.0">

#+end_src

This gives the browsre instructions on how to control the page's dimensions and scaling.

The =width=device-width= part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).

The =initial-scale=1.0= part sets the initial zoom level when the page is first loaded by the browsers.

** The HTML <script> Element

The =<script>= element is used to define client-side JavaScripts.

The following JavaScript writes "Hello JavaScript!" into an HTML element with id="demo":

*Example*:
#+begin_src html

  <script>
    function myFunction() {
      document.getElementById("demo").innerHTML = "Hello JavaScript!";
    }
  </script>

#+end_src

** The HTML <base> Element

The =<base>= element specifies the base URL and/or target for all relative URLs in a page.

The =<base>= tag must have either an href or a target attribute present, or both.

There can only be one single =<base>= element in a document!

*Example*:

Specify a default URL and a default target for all links on a page:

#+begin_src html

  <head>
    <base href="https://github.com/codewithjom" target="_blank">
  </head>

  <body>
    <img src="images/stickman.gif" width="24" height="39" alt="Stickman">
    <a href="tags/tag_base.asp">HTML base Tag</a>
  </body>

#+end_src

* Layout
** HTML Layout Elements

HTML has several semantic elements that define the difference parts of a web page.

- =<header>= - Defines a header for a document or a section
- =<nav>= - Defines a set of navigation links
- =<section>= - Defines a section in a document
- =<article= - Defines an independent, self-contained content
- =<aside>= - Defines content aside from the content (like sidebar)
- =<footer>= - Defines a footer for a document or a section
- =<details>= - Defines additional details that the user can open and close on demand
- =<summary>= - Defines a heading for the =<details>= element

** HTML Layout Techniques

There are four different techniques to create multicolumn layouts. Each technique has its pros and cons.

- CSS framework
- CSS float property
- CSS flexbox
- CSS grid

** CSS Float Layout

It is common to do entire web layouts using the CSS =float= property. Float is easy to learn - you just need to remember how the =float= and =clear= properties work. *Disadvantage*: Floating elements are tied to the document flow, which may harm the flexibility.

** CSS Flexbox Layout

Use of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices.

** CSS Grid Layout

The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.

* Responsive
** What is Responsive Web Design?

Responsive web design is about creating web pages that look good on all devices!

A responsive web design will automatically adjust for different screen sizes and viewports.

Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones).

** Setting The Viewport

To create a responsive website, add the following =<meta>= tag to all your web pages.

*Example*:
#+begin_src html

  <meta name="viewport" content="width=device-width, initial-scale=1.0">

#+end_src

This will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.

** Responsive Images

Responsive images are images that scale nicely to file any browser size.

*** Using the width Property

If the CSS =width= property is set to 100%, the image will be responsive and scale up and down.

*Example*:
#+begin_src html

  <img src="girl.jpg" style="width:100%;">

#+end_src

Notice that if the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the =max-width= property instead.

*** Using the max-width Property

If the =max-width= property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size.

*Example*:
#+begin_src html

  <img src="girl.jpg" style="max-width:100%;height:auto;">

#+end_src

*** Show Different Images Depending on Browser Width

The HTML =<picture>= element allows you to define images for different browser window sizes.

Resize the browser window to see how the image below change depending on the width.

*Example*:
#+begin_src html

  <picture>
    <source srcset="smallflower.jpg" media="(max-width:600px)">
    <source srcset="flowers.jpg" media="(max-width:1500px)">
    <source srcset="flowers.jpg">
    <img src="smallflower.jpg" alt="Flowers">
  </picture>

#+end_src

*** Responsive Text Size

The text size can be set with a "vw" unit, which means the "viewport width". That way the text size will follow the size of the browser window.

*Example*:
#+begin_src html

  <h1 style="font-size:10vw">Hello World</h1>

#+end_src

Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.

*** Media Queries

In addition to resize text and images, it is also common to use media queries in responsive web pages.

With media queries you can define completely different styles for different browser size.

*Example*:
#+begin_src html

  <style>
    .left, .right {
      float: left;
      width: 20%; /* The width is 20%, by default */
    }

    .main {
      float: left;
      width: 60%; /* The width is 60%, by default */
    }

    /* Use a media query to add a breakpoint at 800px: */
    @media screen and (max-width: 800px) {
      .left, .main, .right {
        width: 100%;
      }
    }
  </style>

#+end_src

** Responsive Web Design - Frameworks

All popular CSS Frameworks offer responsive design.

They are free, and easy to use.

*** Bootstrap

A popular CSS framework is Bootstrap. Bootstrap uses HTML, CSS, and jQuery to make responsive web pages.

*Example*:
#+begin_src html

  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Bootstrap</title>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width,initial-scale=1" />
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    </head>
    <body>
      <div class="container">
        <div class="jumbotron">
          <h1>My First Bootstrap Page</h1>
        </div>
        <div class="row">
          <div class="col-sm-4">
            ...
          </div>
          <div class="col-sm-4">
            ...
          </div>
          <div class="col-sm-4">
            ...
          </div>
        </div>
      </div>
    </body>
  </html>

#+end_src

* Computer Code
** HTML <kbd> For Keyboard Input

The HTML =<kbd>= element is used to define keyboard input. The content inside is displayed in the browser's default monospace font.

*Example*:

Define some text as keyboard input in a document:

#+begin_src html

  <p>Save the document by pressing <kbd>Ctrl + S</kbd></p>

#+end_src

** HTML <samp> For Program Output

The HTML =<samp>= element is used to define sample output from a computer program. The content inside is displayed in the browser's default monospace font.

*Example*:

Define some text as sample output from a computer program in a document.

#+begin_src html

  <p>Message from my computer:</p>
  <p><samp>File not found.<br>Press F1 to continue.</samp></p>

#+end_src

** HTML <code> For Computer Code

The HTML =<code>= element is used to define a piece of computer code. The content inside is displayed in the browser's default monospace font.

*Example*:

Define some text as computer code in a document.

#+begin_src html

  <code>
    x = 5;
    y = 6;
    z = x + y;
  </code>

#+end_src

Notice that the =<code>= element does not preserve extra whitespace and line-breaks.

To fix this, you can put the =<code>= element inside a =<pre>= element.

** HTML <var> For Variables

The HTML =<var>= element is used to define a variable in programming or in a mathematical expression. The content inside is typically displayed in italic.

*Example*:

Define some text as variables in a document.

#+begin_src html

  <p>The area of a triangle is: 1/2 x <var>b</var> x <var>h</var>, where <var>b</var> is the base, and <var>h</var> is the vertical height.</p>

#+end_src

* Semantics
** What are Semantic Elements

A semantic element clearly describes its meaning to both the browser and the developer.

Example of *none-semantic* elements: =<div>= and =<span>= - Tells nothing about its content.

Example of *semantic* elements: =<form>=, =<table>=, and =<arcticle>= - Clearly defines its content.
